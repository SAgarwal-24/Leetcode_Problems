 Number of Good Leaf Nodes Pairs

•	Difficulty:Medium
Given the root of a binary tree and an integer distance. A pair of two different leaf nodes of a binary tree is said to be good if the length of the shortest path between them is less than or equal to distance.
Return the number of good leaf node pairs in the tree.
 
Example 1:
 
Input: root = [1,2,3,null,4], distance = 3
Output: 1
Explanation: The leaf nodes of the tree are 3 and 4 and the length of the shortest path between them is 3. This is the only good pair.
Example 2:
 
Input: root = [1,2,3,4,5,6,7], distance = 3
Output: 2
Explanation: The good pairs are [4,5] and [6,7] with shortest path = 2. The pair [4,6] is not good because the length of ther shortest path between them is 4.
Example 3:
Input: root = [7,1,4,6,null,5,3,null,null,null,null,null,2], distance = 3
Output: 1
Explanation: The only good pair is [2,5].
Example 4:
Input: root = [100], distance = 1
Output: 0
Example 5:
Input: root = [1,1,1], distance = 2
Output: 1
 
Constraints:
•	The number of nodes in the tree is in the range [1, 2^10].
•	Each node's value is between [1, 100].
•	1 <= distance <= 10


class Solution {
public:
	int ans=0;
	vector<int> help(int d,TreeNode* root)
	{
		if(!root) return {0};
		if(root->left==NULL&&root->right==NULL)return {1}; // this a leaf node with distance 1
		auto l=help(d,root->left); // list from left
		auto r=help(d,root->right); // list from right 
		// take all possible pairs and compare summation of distances
		for(auto a:l)
		{
			for(auto b:r)
			{
				if((a&&b)&&a+b<=d)ans++; // add all valid pairs
			}
		}
		vector<int> ret; // this is a list of all nodes which the current node will pass to its parent 
		for(auto a:l)
		{
			if(a&&a+1<d)ret.push_back(a+1); 
		}
		for(auto b:r)
		{
			if(b&&b+1<d)ret.push_back(b+1);
		}
		return ret;
	}
	int countPairs(TreeNode* root, int d)
	{
		help(d,root);
		return ans;
	}
};
