 Binary Tree Zigzag Level Order Traversal
Solution
Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).
For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]

input: NULL
output: []

input: [3,9,20,null,null,15,7,23,11,45]
output: [[3],[20,9],[15,7],[45,11,23]]

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
void inorder(TreeNode* root,map<int,vector<TreeNode*>>&m, int lvl)
{
    if(root==NULL)
        return;
    
    m[lvl].push_back(root);
    
    inorder(root->left,m,lvl+1);
    inorder(root->right,m,lvl+1);
    
    return;
};

class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        
        map<int,vector<TreeNode*>>m;
        vector<vector<int>>ans;
        vector<int>nodes_at_same_lvl;
        
        vector<TreeNode*>v;
        int lvl=0;
        
        inorder(root,m,lvl);
        
        for(auto it=m.begin();it!=m.end();it++)
        {
            v=it->second;
            lvl=it->first;
            
            if(lvl%2!=0)
            {
                reverse(v.begin(),v.end());
            }
            
            for(auto jt:v)
            {
                nodes_at_same_lvl.push_back(jt->val);
            }
            
            ans.push_back(nodes_at_same_lvl);
            
            nodes_at_same_lvl.clear();
        }
        
        return ans;
    }
    
    
};


// BFS ZigZag traversal
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        
         vector<vector<int>>ans;
         vector<int>v;
        
        if(root==NULL)
        {
            //ans.push_back(v);
            return ans;
        }
       
        queue<TreeNode*>pq;
        pq.push(root); 
       
        
        int lvl=0;
        
        while(!pq.empty())
        {
            int size=pq.size();
            
            while(size--)
            {
                TreeNode* x=pq.front();
                pq.pop();
                
                if(x->left!=NULL)
                pq.push(x->left);
                
                if(x->right!=NULL)
                pq.push(x->right);
                
                
                v.push_back(x->val);
            }
            
            if(lvl%2!=0)
            {
                reverse(v.begin(),v.end());
            }
            
            lvl++;
            ans.push_back(v);
            v.clear();
            
        }
        
        return ans;
    }
};
