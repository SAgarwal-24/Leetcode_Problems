Design HashSet
Design a HashSet without using any built-in hash table libraries.
To be specific, your design should include these functions:
•	add(value): Insert a value into the HashSet. 
•	contains(value) : Return whether the value exists in the HashSet or not.
•	remove(value): Remove a value in the HashSet. If the value does not exist in the HashSet, do nothing.

Example:
MyHashSet hashSet = new MyHashSet();
hashSet.add(1);         
hashSet.add(2);         
hashSet.contains(1);    // returns true
hashSet.contains(3);    // returns false (not found)
hashSet.add(2);          
hashSet.contains(2);    // returns true
hashSet.remove(2);          
hashSet.contains(2);    // returns false (already removed)

Note:
•	All values will be in the range of [0, 1000000].
•	The number of operations will be in the range of [1, 10000].
•	Please do not use the built-in HashSet library.


Leetcode 705: Design HashSet
	Detailed video explanation: https://youtu.be/U79BoHTcCYw
	=================================================
	

	

	C++:
	----
	class MyHashSet {
	    int numBuckets;
	    vector<list<int>> buckets;
	    
	    int hash_function(int key){
	        return key % numBuckets;
	    }
	public:
	    /** Initialize your data structure here. */
	    MyHashSet() {
	        numBuckets = 15000;
	        buckets = vector<list<int>>(numBuckets, list<int>{});
	    }
	    
	    void add(int key) {
	        int i = hash_function(key);
	        if(find(buckets[i].begin(), buckets[i].end(), key) == buckets[i].end())
	            buckets[i].push_back(key);
	    }
	    
	    void remove(int key) {
	        int i = hash_function(key);
	        auto it = find(buckets[i].begin(), buckets[i].end(), key);
	        if(it != buckets[i].end())
	            buckets[i].erase(it);
	    }
	    
	    /** Returns true if this set contains the specified element */
	    bool contains(int key) {
	        int i = hash_function(key);
	        if(find(buckets[i].begin(), buckets[i].end(), key) == buckets[i].end())
	            return false;
	        return true;
	    }
	};
	

	/**
	 * Your MyHashSet object will be instantiated and called as such:
	 * MyHashSet* obj = new MyHashSet();
	 * obj->add(key);
	 * obj->remove(key);
	 * bool param_3 = obj->contains(key);
	 */
	 
	 
	 Java:
	 -----
	 class MyHashSet {
	    private int numBuckets = 15000;
	    List<Integer>[] buckets;
	    
	    private int hash_function(int key){
	        return key % numBuckets;
	    }
	

	    /** Initialize your data structure here. */
	    public MyHashSet() {
	        buckets = new LinkedList[numBuckets];
	    }
	    
	    public void add(int key) {
	        int i = hash_function(key);
	        if(buckets[i] == null) buckets[i] = new LinkedList<>();
	        if(buckets[i].indexOf(key) == -1)
	            buckets[i].add(key);
	    }
	    
	    public void remove(int key) {
	        int i = hash_function(key);
	        if(buckets[i] == null) return;
	        if(buckets[i].indexOf(key) != -1) buckets[i].remove(buckets[i].indexOf(key));
	    }
	    
	    /** Returns true if this set contains the specified element */
	    public boolean contains(int key) {
	        int i = hash_function(key);
	        if(buckets[i] == null || buckets[i].indexOf(key) == -1) return false;
	        return true;
	    }
	}
	

	/**
	 * Your MyHashSet object will be instantiated and called as such:
	 * MyHashSet obj = new MyHashSet();
	 * obj.add(key);
	 * obj.remove(key);
	 * boolean param_3 = obj.contains(key);
	 */
	

	 
	 
	 
	 Python3:
	 -------
	 class MyHashSet:
	

	    def __init__(self):
	        """
	        Initialize your data structure here.
	        """
	        self.numBuckets = 15000
	        self.buckets = [[] for i in range(self.numBuckets)]
	    
	    def hash_function(self, key):
	        return key % self.numBuckets
	

	    def add(self, key: int) -> None:
	        i = self.hash_function(key)
	        if not key in self.buckets[i]:
	            self.buckets[i].append(key)
	

	    def remove(self, key: int) -> None:
	        i = self.hash_function(key)
	        if key in self.buckets[i]:
	            self.buckets[i].remove(key)
	

	    def contains(self, key: int) -> bool:
	        """
	        Returns true if this set contains the specified element
	        """
	        i = self.hash_function(key)
	        if key in self.buckets[i]:
	            return True
	        return False
	        
	

	

	# Your MyHashSet object will be instantiated and called as such:
	# obj = MyHashSet()
	# obj.add(key)
	# obj.remove(key)
	# param_3 = obj.contains(key)
	 
	 

