Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
(i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).
Find the minimum element.
The array may contain duplicates.
Example 1:
Input: [1,3,5]
Output: 1
Example 2:
Input: [2,2,2,0,1]
Output: 0
Note:
•	This is a follow up problem to Find Minimum in Rotated Sorted Array.
•	Would allow duplicates affect the run-time complexity? How and why?


Cornor Case:
Input:  [7,7,7,1,7,7,7,7,7,7,7]
Output: 1 








class Solution {
    public int findMin(int[] nums) {
        int l = 0;
        int r = nums.length - 1;
        while (l < r) {
            //System.out.println(l+" "+r);
            
            int mid = l + (r - l) / 2;
            if (nums[mid] > nums[r]) l = mid + 1;
            else if (nums[mid] < nums[r]) r = mid;
            else r--;
        }

        return nums[l];
    }
}


Editorial
Brute Force: Linear Search
TC - O(n)
Did we make use of the sortedness of data in linear search? Nope let`s why not try Binary Search.
Binary Search
Let l = 0, r = nums.length - 1
Our min will be in [l, r] since data is sorted but rotated we can drop easily drop left and right sub array based on mid value.
mid = l + (r - l) / 2, Avoid integer overflow in case large l and r values.
Case 1: nums[mid] > nums[r] ==> min will be in [mid + 1, r] hence l = mid + 1
Case 2: nums[mid] < nums[r] ==> min will be in [l, mid] hence r = mid
Case 3: nums[mid] = nums[r] ==> we can't sure where will be min in this case just reduce right bound this is the case of linear search situation, r--
TC - O(logn) Average case while it can go O(n) in worst case ex. [1 1 1 1 1 0 1 1 1 1 1 1 1 1]
Detailed Video Explanation https://www.youtube.com/watch?v=QneygmiFf8I
 
________________________________________
Code 2
class Solution {
    public int findMin(int[] nums) {
        int l = 0;
        int r = nums.length - 1;
        while (l < r) {
            int mid = l + (r - l) / 2;
            if (nums[mid] > nums[r]) l = mid + 1;
            else if (nums[mid] < nums[r]) r = mid;
            else r--;
        }

        return nums[l];
    }
}
Recursive BS
class Solution {
    public int findMin(int[] nums) {
        return findMin(nums, 0, nums.length - 1);
    }
    
    public int findMin(int[] nums, int l, int r) {
        if(l > r) return nums[l];
        int mid = l + (r - l) / 2;
        if(nums[mid] > nums[r]) return findMin(nums, mid + 1, r);
        else if(nums[mid] < nums[r]) return findMin(nums, l, mid);
        else return findMin(nums, l, r - 1);
    }
}
________________________________________
Code 1
class Solution {
    public int findMin(int[] nums) {
        int min = Integer.MAX_VALUE;
        for(int num : nums) 
            min = Math.min(min, num);
        return min;
    }
}
________________________________________
Java-8 Stream
If you are Java-8 lover we can do linear search and find min in 1-line
class Solution {
    public int findMin(int[] nums) {
        return Arrays.stream(nums).min().getAsInt();
    }
}

